shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
a<- 0
-a
a<- 2
-a
abs(a)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library("shiny")
rm(list =ls())
#load the data
mydata <- read.delim("diffexp-myc.txt", sep="\t", header = T)
#load log-foldchange and pvalue from the data.frame
LogFC <- mydata$logFC_WB1PMyc_Ctrl
pValue <- mydata$adj.P.Val_WB1PMyc_Ctrl
#log10
negLogPV <- -log10(pValue)
pvselection <- 2.3
fcselection <- 2
#add PV-FALSE/TRUE row
pvSelectionCol <- as.factor(negLogPV > pvselection)
fcSelectionCol <- as.factor((LogFC > fcselection | LogFC < -fcselection))
bothPostitionCol <- as.factor(((negLogPV > pvselection & (LogFC > fcselection | LogFC <  -fcselection))))
#genrate datafram
df <- cbind(cbind(  data.frame(cbind(LogFC,negLogPV)),
pvSelectionCol,
fcSelectionCol,
bothPostitionCol
))
plot(df$LogFC, df$negLogPV, col=c("gray", "blue")[df$bothPostitionCol], xlab="Log10 Fold Change", ylab="Negative Log10 p-value", main="Foldchange vs p-Value")
#xyplot(df$negLogPV~df$LogFC, col=c("gray", "green")[df$bothPostitionCol])
#add lines
abline(v=c(-fcselection,fcselection), col=c("red", "red"), lty=c(2,2), lwd=c(1,1))
abline(h=pvselection, col="black", lty=2, lwd=1)
str(fcselection)
0-fcselection
0 - fcselection
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?ABLINE
?abline
shiny::runApp()
fcselection
type(fcselection)
class(fcselection)
-fcselection
class(-fcselection)
shiny::runApp()
shiny::runApp()
rm(list =ls())
shiny::runApp()
?seq
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
#install.packages("shiny")
#require("shiny", "lattice")
#install.packages("ggplot2")
#require(ggplot2)
library("shiny")
rm(list =ls())
#load the data
mydata <- read.delim("diffexp-myc.txt", sep="\t", header = T)
#load log-foldchange and pvalue from the data.frame
Gene_id <- mydata$gene_id
LogFC <- mydata$logFC_WB1PMyc_Ctrl
pValue <- mydata$adj.P.Val_WB1PMyc_Ctrl
#log10
negLogPV <- -log10(pValue)
pvselection <- 2.3
fcselection <- 2
#add PV-FALSE/TRUE row
pvSelectionCol <- as.factor(negLogPV > pvselection)
fcSelectionCol <- as.factor((LogFC > fcselection | LogFC < -fcselection))
bothPostitionCol <- as.factor(((negLogPV > pvselection & (LogFC > fcselection | LogFC <  -fcselection))))
#genrate datafram
df <- cbind(cbind(  data.frame(cbind(Gene_id,LogFC,negLogPV)),
pvSelectionCol,
fcSelectionCol,
bothPostitionCol
))
plot(df$LogFC, df$negLogPV, col=c("gray", "blue")[df$bothPostitionCol], xlab="Log10 Fold Change", ylab="Negative Log10 p-value", main="Foldchange vs p-Value")
#xyplot(df$negLogPV~df$LogFC, col=c("gray", "green")[df$bothPostitionCol])
#add lines
abline(v=c(-fcselection,fcselection), col=c("red", "red"), lty=c(2,2), lwd=c(1,1))
abline(h=pvselection, col="black", lty=2, lwd=1)
View(df)
View(df)
View(df)
View(mydata)
View(df)
View(df)
View(df)
str(mydata)
#install.packages("shiny")
#require("shiny", "lattice")
#install.packages("ggplot2")
#require(ggplot2)
library("shiny")
rm(list =ls())
#load the data
mydata <- read.delim("diffexp-myc.txt", sep="\t", header = T)
#load log-foldchange and pvalue from the data.frame
Gene_id <- mydata[1]
LogFC <- mydata$logFC_WB1PMyc_Ctrl
pValue <- mydata$adj.P.Val_WB1PMyc_Ctrl
#log10
negLogPV <- -log10(pValue)
pvselection <- 2.3
fcselection <- 2
#add PV-FALSE/TRUE row
pvSelectionCol <- as.factor(negLogPV > pvselection)
fcSelectionCol <- as.factor((LogFC > fcselection | LogFC < -fcselection))
bothPostitionCol <- as.factor(((negLogPV > pvselection & (LogFC > fcselection | LogFC <  -fcselection))))
#genrate datafram
df <- cbind(cbind(  data.frame(cbind(Gene_id,LogFC,negLogPV)),
pvSelectionCol,
fcSelectionCol,
bothPostitionCol
))
plot(df$LogFC, df$negLogPV, col=c("gray", "blue")[df$bothPostitionCol], xlab="Log10 Fold Change", ylab="Negative Log10 p-value", main="Foldchange vs p-Value")
#xyplot(df$negLogPV~df$LogFC, col=c("gray", "green")[df$bothPostitionCol])
#add lines
abline(v=c(-fcselection,fcselection), col=c("red", "red"), lty=c(2,2), lwd=c(1,1))
abline(h=pvselection, col="black", lty=2, lwd=1)
source('D:/ShinyR/Rcode_vol.R')
View(Gene_id)
View(Gene_id)
View(df)
View(df)
shiny::runApp()
View(df)
View(df)
df[1]
df[1,2,3]
df[c(1,2,3),]
df[,c(1,2,3)]
shiny::runApp()
shiny::runApp()
?abline
?text
shiny::runApp()
shiny::runApp()
?column()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
mydata[1]
shiny::runApp()
row.names(df)
colnames(df)
colnames(df).length
length(colnames(df))
for(val in 1:length(colnames(df))
sfsd
f
for(val in 1:length(colnames(df)){print val}
for(i in 1:length(colnames(df)){cat i}
for(i in 1:length(colnames(df))cat i
for(i in 1:length(colnames(df)) cat i
install.packages("foreach")
library("foreach", lib.loc="D:/Apps/R-3.2.1/library")
for(i in 1:length(colnames(df)) cat i
for(i in 1:length(colnames(df)) {cat i}
for(i in 1:length(colnames(df)) {cat i;}
?for()
?foreach()
foreach(i=1:length(df)) %do% cat i
foreach(i=1:length(df)) %do% cat i
foreach(i=1:length(df))
foreach(i=1:length(df)) print i
?for
(0)
?for()
?for
sadf
sd
f
for (i in 1:length(colnames(df))){}
for (i in 1:length(colnames(df))){}
for (i in 1:length(colnames(df))){print i <- i}
for (i in 1:length(colnames(df))){cat i <- i}
for (i in 1:length(colnames(df))){cat i }
for (i in 1:length(colnames(df))){ df[1] }
i
for (i in 1:length(colnames(df))){}
i
test <- for (i in 1:length(colnames(df))){df[1]}
test
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?read.delim
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?fileInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?navbarPage
shiny::runApp()
?tabPanel
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?which
df
View(df)
View(df)
a <- "LogFC"
df$a
df[a]
min(df[a]}
min(df[a])
shiny::runApp()
shiny::runApp()
shiny::runApp()
?data.frame
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?plot()
shiny::runApp()
